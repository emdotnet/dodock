workflow:
  rules:
    # Exclude commits with a title containing "[no-ci]"
    - if: $CI_COMMIT_TITLE =~ /\[no-ci\]/
      when: never

    # Don't run for the source branch if there is an open merge request (to avoid duplicate builds)
    # https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never

    # Don't run for forks, unless when run manually
    - if: $CI_MERGE_REQUEST_SOURCE_PROJECT_ID && $CI_MERGE_REQUEST_SOURCE_PROJECT_ID != $CI_PROJECT_ID && $CI_JOB_MANUAL != "true"
      when: never

    # Run for merge requests, or...
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

    # or run if the branch is the v3.x.x, v3.x.x-hotfix, main, master or develop branch
    - if: $CI_COMMIT_REF_NAME =~ /(\.x\.x|main|master|develop)/

    # or run if there is a tag
    - if: $CI_COMMIT_TAG != null

    # or if branch name starts with "ci-"
    - if: $CI_COMMIT_REF_NAME =~ /^ci-/

    # of if it is a scheduled pipeline
    - if: $CI_PIPELINE_SOURCE == "schedule"

stages:
  - Unit Tests
  - Docker Dodock
  - Fork Tool

unittests:
  image: "python:3.10-bullseye"

  stage: Unit Tests

  rules:
    # Skip if the commit message contains "[skip-tests]"
    - if: $CI_COMMIT_MESSAGE =~ /\[skip-tests\]/
      when: never
    - when: on_success

    # Skip on scheduled pipelines
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never

  services:
    - name: mariadb:10.6
      command: ['mysqld', '--character-set-server=utf8mb4', '--collation-server=utf8mb4_unicode_ci', '--character-set-client-handshake=FALSE', '--innodb_read_only_compressed=OFF']
    - name: redis
      alias: redis_queue
    - name: redis
      alias: redis_cache
    - name: redis
      alias: redis_socketio

  variables:
    MYSQL_DATABASE: "test_dodock"
    MYSQL_ROOT_PASSWORD: "test_dodock"
    SSH_PRIVATE_KEY: "masked"
    PRIVATE_TOKEN: "masked"

  before_script:
    - apt-get update && DEBIAN_FRONTEND=noninteractive apt-get install -yq --no-install-suggests --no-install-recommends mariadb-client xfonts-75dpi xfonts-base
    - export LANG=C.UTF-8
    - export LC_ALL=C.UTF-8
    - export LANGUAGE=en_US.UTF-8
    - wget -q https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6-1/wkhtmltox_0.12.6-1.buster_amd64.deb
    - dpkg -i wkhtmltox_0.12.6-1.buster_amd64.deb && rm wkhtmltox_0.12.6-1.buster_amd64.deb
    - rm -rf /var/lib/apt/lists/*
    - rm -rf /etc/apt/sources.list.d/*
    - curl -sL https://deb.nodesource.com/setup_18.x | bash
    - apt-get install -y nodejs
    - npm install --global yarn
    - export PATH=$PATH:/home/dokotest/.local/bin
    - adduser --disabled-password --gecos "" dokotest
    - usermod -aG sudo dokotest
    - echo 'dokotest ALL=(ALL)  NOPASSWD:ALL' >> /etc/sudoers
    - su -c "pip install dokos-cli" dokotest
    - su -c "cd /home/dokotest && bench init dokos-bench --no-backups --skip-redis-config-generation --skip-assets --frappe-path /builds/dokos/dodock/" dokotest
    - su -c "cp -r /home/dokotest/dokos-bench/apps/frappe/test_sites/test_site /home/dokotest/dokos-bench/sites/" dokotest
    - su -c "cd /home/dokotest/dokos-bench && sed -i 's/^watch:/# watch:/g' Procfile"
    - su -c "cd /home/dokotest/dokos-bench && sed -i 's/^schedule:/# schedule:/g' Procfile"
    - su -c "cd /home/dokotest/dokos-bench && sed -i 's/^socketio:/# socketio:/g' Procfile"
    - su -c "cd /home/dokotest/dokos-bench && sed -i 's/^redis_socketio:/# redis_socketio:/g' Procfile"
    - su -c "cd /home/dokotest/dokos-bench && cat Procfile"
    - su -c "cd /home/dokotest/dokos-bench && bench setup requirements --dev" dokotest
    - su -c "cd /home/dokotest/dokos-bench && bench start &> bench_start.log &" dokotest
    - su -c "cd /home/dokotest/dokos-bench && bench --site test_site reinstall --yes --mariadb-root-password test_dodock" dokotest
    - su -c "cd /home/dokotest/dokos-bench && bench build --app frappe" dokotest

  script:
    - su -c "cd /home/dokotest/dokos-bench && bench --site test_site run-parallel-tests --app frappe" dokotest

build_docker:
  stage: Docker Dodock
  rules:
    # Run if the commit is tagged or if its message contains "[build-docker]"
    - if: $CI_COMMIT_TAG != null
    - if: $CI_COMMIT_MESSAGE =~ /\[build-docker\]/

    # Skip on scheduled pipelines
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never

  image: docker:git
  services:
    - docker:dind
  variables:
    DODOCK_BRANCH: "${CI_COMMIT_REF_NAME}"
    SSH_PRIVATE_KEY: "masked"
    PRIVATE_TOKEN: "masked"
  script:
    # Set image tag
    - IMAGE_TAG=$CI_COMMIT_TAG
    - if [ -z "$IMAGE_TAG" ]; then
        IMAGE_TAG=$CI_COMMIT_SHORT_SHA;
      fi

    # Override image tag from commit message if it contains "[docker-tag=<branch>]"
    - TAG_FROM_COMMIT_MESSAGE=$(echo "$CI_COMMIT_MESSAGE" | sed -n 's/.*\[docker-tag=\(.*\)\].*/\1/p')
    - if [ -n "$TAG_FROM_COMMIT_MESSAGE" ]; then IMAGE_TAG="$TAG_FROM_COMMIT_MESSAGE"; fi

    # Set image name
    - IMAGE_NAME="$CI_REGISTRY_IMAGE:$IMAGE_TAG"

    - echo "Building image $IMAGE_NAME"
    - git clone https://github.com/frappe/frappe_docker.git
    - cd frappe_docker
    - >
      docker build \
        --build-arg=FRAPPE_PATH=https://gitlab.com/dokos/dodock \
        --build-arg=FRAPPE_BRANCH=$DODOCK_BRANCH \
        --build-arg=PYTHON_VERSION=3.10.6 \
        --build-arg=NODE_VERSION=18.16.1 \
        --tag=$IMAGE_NAME \
        --file=images/custom/Containerfile .

    - echo "Logging in to registry $CI_REGISTRY"
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

    - echo "Pushing image $IMAGE_NAME"
    - docker push $IMAGE_NAME

    # Push latest tag if the commit is tagged
    - if [ -n "$CI_COMMIT_TAG" ]; then
        N="$CI_REGISTRY_IMAGE:latest";
        echo "Pushing image $N";
        docker tag $IMAGE_NAME $N;
        docker push $N;
      fi

    # Push hotfix tag if the commit is on the hotfix branch
    - if [ "$CI_COMMIT_REF_NAME" = "v3.x.x-hotfix" ]; then
        N="$CI_REGISTRY_IMAGE:hotfix";
        echo "Pushing image $N";
        docker tag $IMAGE_NAME $N;
        docker push $N;
      fi

    # Push develop tag if the commit is on the develop branch
    - if [ "$CI_COMMIT_REF_NAME" = "develop" ]; then
        N="$CI_REGISTRY_IMAGE:develop";
        echo "Pushing image $N";
        docker tag $IMAGE_NAME $N;
        docker push $N;
      fi

forktool:
  stage: Fork Tool
  rules:
    # Run only for scheduled pipelines
    - if: $CI_PIPELINE_SOURCE == "schedule" && $DOKOS_ACTION == "forktool"

    # Or if the commit message contains "[forktool]"
    - if: $CI_OPEN_MERGE_REQUESTS && $CI_MERGE_REQUEST_SOURCE_PROJECT_IS != $CI_PROJECT_IS && $CI_COMMIT_MESSAGE =~ /\[forktool\]/

  image: "python:3.10-bullseye"

  before_script:
    - if [ -z "$SSH_PRIVATE_KEY" ]; then echo "SSH_PRIVATE_KEY is not set"; exit 1; fi
    - if [ -z "$PRIVATE_TOKEN" ]; then echo "PRIVATE_TOKEN is not set"; exit 1; fi

    # https://docs.gitlab.com/ee/ci/ssh_keys/#ssh-keys-when-using-the-docker-executor
    # https://docs.gitlab.com/ee/ci/ssh_keys/#verifying-the-ssh-host-keys
    # https://gitlab.com/gitlab-examples/ssh-private-key/-/blob/master/.gitlab-ci.yml
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-add - <<<"${SSH_PRIVATE_KEY}" > /dev/null
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts

    - git config --global user.email "forktool@dokos.io"
    - git config --global user.name "Dokobot ðŸ¤–"

    - git clone "git@gitlab.com:dokos/forktool.git" ~/forktool
    - cd "$CI_PROJECT_DIR"
    - pip install pre-commit click python-gitlab
    - pre-commit install

  script:
    - cd "$CI_PROJECT_DIR"

    # Write config file to avoid interactive prompt
    - mkdir -p ~/.config/forktool
    - C="$HOME/.config/forktool/$CI_PROJECT_NAME.conf"
    - echo "[forktool]" > $C
    - echo "remote_base=develop" >> $C
    - echo "remote_url=https://github.com/frappe/frappe.git" >> $C
    - echo "local_base=develop" >> $C
    - echo "local_url=upstream" >> $C
    - echo "max_changes=30" >> $C

    - git remote add upstream "git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git"
    - git checkout -B develop

    - python ~/forktool/forktool.py list --auto --output /tmp/forktool-list.txt
    - python ~/forktool/forktool.py auto-mr /tmp/forktool-list.txt
